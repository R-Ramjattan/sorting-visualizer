{"ast":null,"code":"export const bubbleSort = array => {\n  let temp = 0;\n  const animation = [];\n  //const arrayBars = document.getElementsByClassName('array-bar');\n\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n      if (array[j] > array[j + 1]) {\n        temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n        animation.push({\n          indexOne: j,\n          indexTwo: j + 1,\n          isSwap: true\n        });\n      } else {\n        animation.push({\n          indexOne: j + 1,\n          indexTwo: j + 1,\n          isSwap: false\n        });\n      }\n    }\n  }\n  return animation;\n};\nexport const quickSort = (array, animation) => {\n  if (array.length <= 1) {\n    animation.push({\n      pivot: pivot\n    });\n    return array;\n  }\n  //Set pointer\n  var pivot = array[0];\n  var left = [];\n  var right = [];\n  for (var i = 1; i < array.length; i++) {\n    //Iterate through all elements\n    //If element is smaller than pointer set to left\n    //If element is greater than pointer set to right  \n    animation.push({\n      pivot: pivot,\n      nextElement: i\n    });\n    array[i] < pivot ? left.push(array[i]) : right.push(array[i]);\n  }\n\n  //recurse left partition, right partition, then combine\n  //console.log(animation);\n  left = quickSort(left, animation);\n  right = quickSort(right, animation);\n  return animation;\n  //        return quickSort(left, animation).concat(pivot, quickSort((right), animation));\n};","map":{"version":3,"names":["bubbleSort","array","temp","animation","i","length","j","push","indexOne","indexTwo","isSwap","quickSort","pivot","left","right","nextElement"],"sources":["C:/Users/Juni Ramjattan/Desktop/githubIO/demo0one/src/sortingAlgorithms/sortingAlgorithms.js"],"sourcesContent":["\r\nexport const bubbleSort = array => {\r\n\r\n    let temp = 0;\r\n    const animation = [];\r\n    //const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n    \r\n    for(let i = 0; i<array.length; i++){\r\n        for(let j = 0; j<array.length-i-1; j++){\r\n\r\n            if(array[j] > array[j+1]){\r\n\r\n                temp = array[j];\r\n                array[j] = array[j+1];\r\n                array[j+1] = temp;\r\n\r\n                animation.push({indexOne : j, indexTwo : j+1, isSwap : true});\r\n      \r\n            }else{\r\n                animation.push({indexOne : j+1, indexTwo : j+1, isSwap : false});\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    return animation;\r\n}\r\n\r\nexport const quickSort = (array, animation) => {\r\n        \r\n        if (array.length <= 1) {\r\n          \r\n          animation.push({pivot : pivot});\r\n          return array;\r\n        }\r\n        //Set pointer\r\n        var pivot = array[0];\r\n        \r\n        var left = []; \r\n        var right = [];\r\n        \r\n        for (var i = 1; i < array.length; i++) {\r\n          //Iterate through all elements\r\n          //If element is smaller than pointer set to left\r\n          //If element is greater than pointer set to right  \r\n          animation.push({pivot : pivot, nextElement : i});\r\n          array[i] < pivot ? left.push(array[i]) : right.push(array[i]);\r\n        }\r\n        \r\n        \r\n        //recurse left partition, right partition, then combine\r\n        //console.log(animation);\r\n        left = quickSort(left, animation);\r\n        right = quickSort(right, animation);\r\n        return animation;\r\n//        return quickSort(left, animation).concat(pivot, quickSort((right), animation));\r\n      \r\n}\r\n\r\n\r\n\r\n\r\n"],"mappings":"AACA,OAAO,MAAMA,UAAU,GAAGC,KAAK,IAAI;EAE/B,IAAIC,IAAI,GAAG,CAAC;EACZ,MAAMC,SAAS,GAAG,EAAE;EACpB;;EAGA,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAACH,KAAK,CAACI,MAAM,EAAED,CAAC,EAAE,EAAC;IAC/B,KAAI,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAACL,KAAK,CAACI,MAAM,GAACD,CAAC,GAAC,CAAC,EAAEE,CAAC,EAAE,EAAC;MAEnC,IAAGL,KAAK,CAACK,CAAC,CAAC,GAAGL,KAAK,CAACK,CAAC,GAAC,CAAC,CAAC,EAAC;QAErBJ,IAAI,GAAGD,KAAK,CAACK,CAAC,CAAC;QACfL,KAAK,CAACK,CAAC,CAAC,GAAGL,KAAK,CAACK,CAAC,GAAC,CAAC,CAAC;QACrBL,KAAK,CAACK,CAAC,GAAC,CAAC,CAAC,GAAGJ,IAAI;QAEjBC,SAAS,CAACI,IAAI,CAAC;UAACC,QAAQ,EAAGF,CAAC;UAAEG,QAAQ,EAAGH,CAAC,GAAC,CAAC;UAAEI,MAAM,EAAG;QAAI,CAAC,CAAC;MAEjE,CAAC,MAAI;QACDP,SAAS,CAACI,IAAI,CAAC;UAACC,QAAQ,EAAGF,CAAC,GAAC,CAAC;UAAEG,QAAQ,EAAGH,CAAC,GAAC,CAAC;UAAEI,MAAM,EAAG;QAAK,CAAC,CAAC;MACpE;IACJ;EAEJ;EAEA,OAAOP,SAAS;AACpB,CAAC;AAED,OAAO,MAAMQ,SAAS,GAAG,CAACV,KAAK,EAAEE,SAAS,KAAK;EAEvC,IAAIF,KAAK,CAACI,MAAM,IAAI,CAAC,EAAE;IAErBF,SAAS,CAACI,IAAI,CAAC;MAACK,KAAK,EAAGA;IAAK,CAAC,CAAC;IAC/B,OAAOX,KAAK;EACd;EACA;EACA,IAAIW,KAAK,GAAGX,KAAK,CAAC,CAAC,CAAC;EAEpB,IAAIY,IAAI,GAAG,EAAE;EACb,IAAIC,KAAK,GAAG,EAAE;EAEd,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC;IACA;IACA;IACAD,SAAS,CAACI,IAAI,CAAC;MAACK,KAAK,EAAGA,KAAK;MAAEG,WAAW,EAAGX;IAAC,CAAC,CAAC;IAChDH,KAAK,CAACG,CAAC,CAAC,GAAGQ,KAAK,GAAGC,IAAI,CAACN,IAAI,CAACN,KAAK,CAACG,CAAC,CAAC,CAAC,GAAGU,KAAK,CAACP,IAAI,CAACN,KAAK,CAACG,CAAC,CAAC,CAAC;EAC/D;;EAGA;EACA;EACAS,IAAI,GAAGF,SAAS,CAACE,IAAI,EAAEV,SAAS,CAAC;EACjCW,KAAK,GAAGH,SAAS,CAACG,KAAK,EAAEX,SAAS,CAAC;EACnC,OAAOA,SAAS;EACxB;AAEA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}