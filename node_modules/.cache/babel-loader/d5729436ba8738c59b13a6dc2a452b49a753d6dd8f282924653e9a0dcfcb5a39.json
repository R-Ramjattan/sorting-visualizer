{"ast":null,"code":"export const bubbleSort = array => {\n  let temp = 0;\n  const animation = [];\n  //const arrayBars = document.getElementsByClassName('array-bar');\n\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n      if (array[j] > array[j + 1]) {\n        temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n        animation.push({\n          indexOne: j,\n          indexTwo: j + 1,\n          isSwap: true\n        });\n      } else {\n        animation.push({\n          indexOne: j + 1,\n          indexTwo: j + 1,\n          isSwap: false\n        });\n      }\n    }\n  }\n  return animation;\n};\n//Pass in start position relative to step above\n//Increment start value accordingly to match global space\nexport const quickSort = (array, animation, referenceArray, pivotIndex) => {\n  var pivot = array[0];\n  if (array.length <= 1) {\n    animation.push({\n      pivot: pivotIndex,\n      comparedElement: pivotIndex\n    });\n    return array;\n  }\n  var left = [];\n  var right = [];\n\n  //Partition\n  ////////////////// Offset + relative pivot index (Right branch)\n  for (var i = 1; i < array.length; i++) {\n    //Iterate through all elements\n    //If element is smaller than pivot set to left\n    //If element is greater than pivot set to right  \n    if (array[i] < pivot) {\n      left.push(array[i]);\n      animation.push({\n        pivot: pivotIndex,\n        comparedElement: i,\n        isSwap: true\n      });\n    } else {\n      right.push(array[i]);\n      animation.push({\n        pivot: pivotIndex,\n        comparedElement: i,\n        isSwap: false\n      });\n    }\n  }\n  pivotIndex = left.length;\n  referenceArray = left.concat(pivot, right);\n  //recurse left partition, right partition, then combine\n  //console.log(animation);\n  left = quickSort(left, animation, referenceArray);\n  right = quickSort(right, animation, referenceArray);\n  return animation;\n  //        return quickSort(left, animation).concat(pivot, quickSort((right), animation));\n};\n\nfunction partition(array, low, high) {\n  let pivot = array[0];\n  let temp = 0;\n  for (let i = 1; i < array.length; i++) {\n    // If element to right of pivot is smaller, swap\n    if (array[i] < pivot) {\n      temp = array[i];\n      array[i] = pivot;\n    } // If next element is larger, do nothing and highlight next \n  }\n}","map":{"version":3,"names":["bubbleSort","array","temp","animation","i","length","j","push","indexOne","indexTwo","isSwap","quickSort","referenceArray","pivotIndex","pivot","comparedElement","left","right","concat","partition","low","high"],"sources":["C:/Users/Juni Ramjattan/Desktop/githubIO/demo0one/src/sortingAlgorithms/sortingAlgorithms.js"],"sourcesContent":["\r\nexport const bubbleSort = array => {\r\n\r\n    let temp = 0;\r\n    const animation = [];\r\n    //const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n    \r\n    for(let i = 0; i<array.length; i++){\r\n        for(let j = 0; j<array.length-i-1; j++){\r\n\r\n            if(array[j] > array[j+1]){\r\n\r\n                temp = array[j];\r\n                array[j] = array[j+1];\r\n                array[j+1] = temp;\r\n\r\n                animation.push({indexOne : j, indexTwo : j+1, isSwap : true});\r\n      \r\n            }else{\r\n                animation.push({indexOne : j+1, indexTwo : j+1, isSwap : false});\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    return animation;\r\n}\r\n//Pass in start position relative to step above\r\n//Increment start value accordingly to match global space\r\nexport const quickSort = (array, animation, referenceArray, pivotIndex) => {\r\n        var pivot = array[0];\r\n        \r\n        if (array.length <= 1) {\r\n          \r\n          animation.push({pivot : pivotIndex, comparedElement : pivotIndex });\r\n          return array;\r\n        }\r\n    \r\n        var left = [];\r\n        var right = [];\r\n\r\n        //Partition\r\n        ////////////////// Offset + relative pivot index (Right branch)\r\n        for (var i = 1; i < array.length; i++) {\r\n          //Iterate through all elements\r\n          //If element is smaller than pivot set to left\r\n          //If element is greater than pivot set to right  \r\n          if(array[i] < pivot){\r\n            left.push(array[i]);\r\n            animation.push({pivot: pivotIndex, comparedElement: i, isSwap : true});\r\n          }else{\r\n            right.push(array[i]);\r\n            animation.push({pivot: pivotIndex, comparedElement: i, isSwap : false});\r\n          }\r\n        }\r\n        pivotIndex = left.length;\r\n        referenceArray = left.concat(pivot, right);\r\n        //recurse left partition, right partition, then combine\r\n        //console.log(animation);\r\n        left = quickSort(left, animation, referenceArray);\r\n        right = quickSort(right, animation, referenceArray);\r\n        \r\n        \r\n        \r\n        return animation;\r\n//        return quickSort(left, animation).concat(pivot, quickSort((right), animation));\r\n      \r\n}\r\n\r\nfunction partition(array, low, high){\r\n    let pivot = array[0];\r\n    let temp = 0;\r\n    for(let i = 1; i<array.length; i++){\r\n        // If element to right of pivot is smaller, swap\r\n        if(array[i] < pivot){\r\n            temp = array[i];\r\n            array[i] = pivot;\r\n            \r\n            \r\n        } // If next element is larger, do nothing and highlight next \r\n    }\r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}