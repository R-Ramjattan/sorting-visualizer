{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Juni Ramjattan\\\\Desktop\\\\githubIO\\\\demo0one\\\\src\\\\SortingVisualizer\\\\SortingVisualizer.jsx\";\nimport React from 'react';\nimport * as sortingAlgorithms from '../sortingAlgorithms/sortingAlgorithms';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      intervalId: null,\n      iteration: 0,\n      animation: []\n    };\n  }\n  componentDidMount() {\n    this.generateArray();\n  }\n\n  //Create values for array upon mounting component\n  generateArray() {\n    const array = [];\n    for (let i = 0; i < 55; i++) {\n      array.push({\n        value: randomNumberInRange(5, 750),\n        color: 'cornflowerblue'\n      });\n    }\n    this.setState({\n      array\n    });\n  }\n  quickSort() {}\n  bubbleSort() {\n    const animation = sortingAlgorithms.bubbleSort(this.state.array.map(function (e) {\n      return e.value;\n    }));\n    this.state.iteration = 0;\n\n    // setTimeout(() => {\n    //     barOneStyle.backgroundColor = 'red';\n    //     barTwoStyle.backgroundColor = 'red';\n    //     barOneStyle.height = `${setHeight}px`;\n    //     barTwoStyle.height = `${setHeight2}px`;\n\n    // },i*80);\n    const intervalId = window.setInterval(function () {\n      //1) Get two previous swaps from anim array\n      //2) Reset style\n      if (iteration > 0) {\n        let prevSwap = animation[iteration - 1];\n        this.state.array[currentSwap.indexOne].color = 'cornflowerblue';\n        this.state.array[currentSwap.indexTwo].color = 'cornflowerblue';\n      }\n\n      //3) Get two current swaps\n      //4) Set style\n      let currentSwap = animation[iteration];\n      if (currentSwap.isSwap === true) {\n        let temp = this.state.array[currentSwap.indexOne].value;\n        this.state.array[currentSwap.indexOne].value = this.state.array[currentSwap.indexTwo].value;\n        this.state.array[currentSwap.indexTwo].value = temp;\n      }\n      this.state.array[currentSwap.indexOne].color = 'red';\n      this.state.array[currentSwap.indexTwo].color = 'red';\n\n      //5) Check to see if last iteration then remove interval\n      if (iteration >= animation.length - 1) {\n        clearInterval(intervalId);\n      }\n\n      //6) increment iterator++\n      this.state.iteration++;\n\n      // let barPointer = 0;\n\n      // let sortingArraySize = this.state.array.length;\n\n      // const barOneStyle = bars[barPointer].style;\n      // const barTwoStyle = bars[barPointer+1].style\n      // let setHeight = animation[i];\n      // let setHeight2 = animation[i+1];\n\n      // barOneStyle.backgroundColor = 'red';\n      // barTwoStyle.backgroundColor = 'red';\n      // barOneStyle.height = `${setHeight}px`;\n      // barTwoStyle.height = `${setHeight2}px`;\n\n      // if(barPointer === sortingArraySize-1){\n      //     sortingArraySize = sortingArraySize-1;\n      //     barPointer = 0;\n      // }\n    }, 100);\n\n    // setTimeout(() => {\n    //     barOneStyle.backgroundColor = 'cornflowerblue';\n    //     barTwoStyle.backgroundColor = 'cornflowerblue';\n\n    // },i*20);\n    // if(animation[i] < animation[i+1] ){\n    //     barPointer++;\n    // }\n  }\n\n  mergeSort() {}\n  heapSort() {}\n\n  //Manually change sorting method to test\n  testSortAlgorithm() {\n    for (let i = 0; i < 40; i++) {\n      const testedArray = [];\n      for (let i = 0; i < 55; i++) {\n        testedArray.push(randomNumberInRange(5, 750));\n      }\n      //Sorting algorithm array\n      const sortedArray = sortingAlgorithms.bubbleSort(testedArray);\n      //JS sorted array\n      const jsSortedArray = testedArray.sort();\n      console.log(arrayEquals(sortedArray, jsSortedArray));\n    }\n  }\n\n  // For each value in the array map it to a div-array-bar with a key id\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: [array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          height: `${value.value}px`,\n          color: `${value.color}`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this)), \";\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.generateArray(),\n        children: \"Generate New Array\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.quickSort(),\n        children: \"Quick Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.bubbleSort(),\n        children: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.generateArray(),\n        children: \"Merge Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.generateArray(),\n        children: \"Heap Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.testSortAlgorithm(),\n        children: \"Test Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this);\n  }\n}\nfunction randomNumberInRange(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nfunction arrayEquals(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) {\n    return false;\n  } else {\n    for (let i = 0; i < arrayOne.length; i++) {\n      if (arrayOne[i] !== arrayTwo[i]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["React","sortingAlgorithms","SortingVisualizer","Component","constructor","props","state","array","intervalId","iteration","animation","componentDidMount","generateArray","i","push","value","randomNumberInRange","color","setState","quickSort","bubbleSort","map","e","window","setInterval","prevSwap","currentSwap","indexOne","indexTwo","isSwap","temp","length","clearInterval","mergeSort","heapSort","testSortAlgorithm","testedArray","sortedArray","jsSortedArray","sort","console","log","arrayEquals","render","idx","height","min","max","Math","floor","random","arrayOne","arrayTwo"],"sources":["C:/Users/Juni Ramjattan/Desktop/githubIO/demo0one/src/SortingVisualizer/SortingVisualizer.jsx"],"sourcesContent":["import React from 'react'\r\n\r\nimport * as sortingAlgorithms from '../sortingAlgorithms/sortingAlgorithms';\r\n\r\n\r\n\r\nexport default class SortingVisualizer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            intervalId: null,\r\n            iteration: 0,\r\n            animation: [],\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.generateArray();\r\n    }\r\n\r\n    //Create values for array upon mounting component\r\n    generateArray(){\r\n        const array = [];\r\n        for(let i=0; i< 55; i++){\r\n            \r\n            array.push({value: randomNumberInRange(5,750), color : 'cornflowerblue'});\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    quickSort(){\r\n        \r\n    }\r\n\r\n    bubbleSort(){\r\n        \r\n\r\n        const animation = sortingAlgorithms.bubbleSort(this.state.array.map(function(e){return e.value}));\r\n        this.state.iteration = 0;\r\n\r\n            // setTimeout(() => {\r\n            //     barOneStyle.backgroundColor = 'red';\r\n            //     barTwoStyle.backgroundColor = 'red';\r\n            //     barOneStyle.height = `${setHeight}px`;\r\n            //     barTwoStyle.height = `${setHeight2}px`;\r\n\r\n            // },i*80);\r\n            const intervalId = window.setInterval(function(){\r\n                //1) Get two previous swaps from anim array\r\n                //2) Reset style\r\n                if(iteration > 0){\r\n                    let prevSwap = animation[iteration-1];\r\n                    this.state.array[currentSwap.indexOne].color = 'cornflowerblue';\r\n                    this.state.array[currentSwap.indexTwo].color = 'cornflowerblue';\r\n                }\r\n                \r\n                //3) Get two current swaps\r\n                //4) Set style\r\n                let currentSwap = animation[iteration];\r\n                if(currentSwap.isSwap === true){\r\n                    let temp = this.state.array[currentSwap.indexOne].value;\r\n                    this.state.array[currentSwap.indexOne].value = this.state.array[currentSwap.indexTwo].value;\r\n                    this.state.array[currentSwap.indexTwo].value = temp;\r\n                }\r\n                this.state.array[currentSwap.indexOne].color = 'red';\r\n                this.state.array[currentSwap.indexTwo].color = 'red';\r\n\r\n                //5) Check to see if last iteration then remove interval\r\n                if(iteration >= animation.length-1){\r\n                    clearInterval(intervalId);\r\n                }\r\n\r\n                //6) increment iterator++\r\n                this.state.iteration++;\r\n\r\n\r\n\r\n                // let barPointer = 0;\r\n        \r\n                // let sortingArraySize = this.state.array.length;\r\n\r\n                // const barOneStyle = bars[barPointer].style;\r\n                // const barTwoStyle = bars[barPointer+1].style\r\n                // let setHeight = animation[i];\r\n                // let setHeight2 = animation[i+1];\r\n\r\n                // barOneStyle.backgroundColor = 'red';\r\n                // barTwoStyle.backgroundColor = 'red';\r\n                // barOneStyle.height = `${setHeight}px`;\r\n                // barTwoStyle.height = `${setHeight2}px`;\r\n                \r\n            \r\n                // if(barPointer === sortingArraySize-1){\r\n                //     sortingArraySize = sortingArraySize-1;\r\n                //     barPointer = 0;\r\n                // }\r\n              }, 100);\r\n\r\n\r\n            // setTimeout(() => {\r\n            //     barOneStyle.backgroundColor = 'cornflowerblue';\r\n            //     barTwoStyle.backgroundColor = 'cornflowerblue';\r\n                    \r\n\r\n            // },i*20);\r\n            // if(animation[i] < animation[i+1] ){\r\n            //     barPointer++;\r\n            // }\r\n            \r\n            \r\n\r\n        \r\n    }\r\n\r\n    mergeSort(){\r\n\r\n    }\r\n\r\n    heapSort(){\r\n\r\n    }\r\n\r\n    //Manually change sorting method to test\r\n    testSortAlgorithm(){\r\n        for(let i = 0; i<40; i++){\r\n            const testedArray = [];\r\n            for(let i=0; i< 55; i++){\r\n                \r\n                testedArray.push(randomNumberInRange(5,750));\r\n            }\r\n            //Sorting algorithm array\r\n            const sortedArray = sortingAlgorithms.bubbleSort(testedArray);\r\n            //JS sorted array\r\n            const jsSortedArray = testedArray.sort();\r\n            console.log(arrayEquals(sortedArray, jsSortedArray));\r\n            \r\n        }\r\n    \r\n        \r\n    }\r\n\r\n    // For each value in the array map it to a div-array-bar with a key id\r\n    render(){\r\n        const {array} = this.state;\r\n        \r\n        return(\r\n            \r\n            <div className='array-container'>\r\n            {array.map((value, idx) => (\r\n                \r\n                <div className='array-bar' style={{height: `${value.value}px`, color : `${value.color}`}} key={idx}>\r\n                    \r\n                </div>\r\n                \r\n            ))};\r\n            <button onClick={() => this.generateArray()}>Generate New Array</button>\r\n            <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n            <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n            <button onClick={() => this.generateArray()}>Merge Sort</button>\r\n            <button onClick={() => this.generateArray()}>Heap Sort</button>\r\n            <button onClick={() => this.testSortAlgorithm()}>Test Algorithm</button>\r\n            \r\n            </div>\r\n           \r\n        );\r\n       \r\n    }\r\n \r\n}\r\nfunction randomNumberInRange(min, max) {\r\n    \r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\nfunction arrayEquals(arrayOne, arrayTwo){\r\n    if(arrayOne.length !== arrayTwo.length){\r\n        return false;\r\n    }else {\r\n        for(let i = 0; i<arrayOne.length; i++){\r\n            if(arrayOne[i] !== arrayTwo[i]){\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}