{"ast":null,"code":"export const bubbleSort = array => {\n  let temp = 0;\n  const animation = [];\n  //const arrayBars = document.getElementsByClassName('array-bar');\n\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n      if (array[j] > array[j + 1]) {\n        temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n        animation.push({\n          indexOne: j,\n          indexTwo: j + 1,\n          isSwap: true\n        });\n      } else {\n        animation.push({\n          indexOne: j + 1,\n          indexTwo: j + 1,\n          isSwap: false\n        });\n      }\n    }\n  }\n  return animation;\n};\nexport const quickSort = (array, start, end, animation) => {\n  if (end - start <= 2) {\n    return;\n  }\n  //pivot index (midpoint)\n  let p = start + Math.ceil((end - start) / 2);\n  //pivot value\n  console.log(1);\n  p = partition(array, p, start, end, animation);\n  console.log(\"left\");\n  quickSort(array, start, p, animation);\n  console.log(\"right\");\n  quickSort(array, p + 1, end, animation);\n};\nfunction partition(array, p, start, end, animation) {\n  let l = start;\n  let h = end - 1;\n  let pivot = array[p];\n  console.log(2);\n  swap(array, p, end - 1, animation);\n  while (l < h) {\n    if (array[l] < pivot) {\n      l++;\n    } else if (array[h] >= pivot) {\n      h--;\n    } else {\n      swap(array, l, h);\n    }\n  }\n  let mid = h;\n  if (array[h] < pivot) {\n    mid++;\n  }\n  console.log(3);\n  swap(array, end - 1, mid, animation);\n  return mid;\n}\nfunction swap(array, l, h, animation) {\n  let temp = array[l];\n  array[l] = array[h];\n  array[h] = temp;\n  console.log(animation);\n}\n\n/*           quickSort first attempt\r\n//         var pivot = array[0];\r\n        \r\n//         if (array.length <= 1) {\r\n          \r\n//           animation.push({pivot : offset, comparedElement : offset });\r\n//           return array;\r\n//         }\r\n    \r\n//         var left = [];\r\n//         var right = [];\r\n        \r\n//         //Partition\r\n//         for (var i = 1; i < array.length; i++) {\r\n//           //Iterate through all elements\r\n//           //If element is smaller than pivot set to left\r\n//           //If element is greater than pivot set to right  \r\n//           if(array[i] < pivot){\r\n//             left.push(array[i]);\r\n            \r\n//           }else{\r\n//             right.push(array[i]);\r\n//             animation.push({pivot: offset, comparedElement: i, isSwap : false});\r\n//           }\r\n//         }\r\n//         var newArray = left.concat(pivot, right);\r\n        \r\n//         for (var i = 0; i < newArray.length; i++) {\r\n//             if(newArray[i] != array[i]){\r\n//                 animation.push({pivot : })\r\n//             }\r\n//         }\r\n        \r\n       \r\n        \r\n//         return quickSort(left, animation, offset).concat(pivot,quickSort(right, animation, (offset+left.length+1)));;\r\n// //        return quickSort(left, animation).concat(pivot, quickSort((right), animation));\r\n      \r\n*/","map":{"version":3,"names":["bubbleSort","array","temp","animation","i","length","j","push","indexOne","indexTwo","isSwap","quickSort","start","end","p","Math","ceil","console","log","partition","l","h","pivot","swap","mid"],"sources":["C:/Users/Juni Ramjattan/Desktop/githubIO/demo0one/src/sortingAlgorithms/sortingAlgorithms.js"],"sourcesContent":["\r\nexport const bubbleSort = array => {\r\n\r\n    let temp = 0;\r\n    const animation = [];\r\n    //const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n    \r\n    for(let i = 0; i<array.length; i++){\r\n        for(let j = 0; j<array.length-i-1; j++){\r\n\r\n            if(array[j] > array[j+1]){\r\n\r\n                temp = array[j];\r\n                array[j] = array[j+1];\r\n                array[j+1] = temp;\r\n\r\n                animation.push({indexOne : j, indexTwo : j+1, isSwap : true});\r\n      \r\n            }else{\r\n                animation.push({indexOne : j+1, indexTwo : j+1, isSwap : false});\r\n            }\r\n            \r\n        }\r\n        \r\n        \r\n    }\r\n    \r\n    return animation;\r\n}\r\n\r\nexport const quickSort = (array, start, end, animation) => {\r\n\r\n    if(end - start <= 2){\r\n        \r\n        return;\r\n    }\r\n    //pivot index (midpoint)\r\n    let p = start + Math.ceil((end-start)/2);\r\n    //pivot value\r\n    console.log(1);\r\n    p = partition(array, p, start, end, animation);\r\n    console.log(\"left\");\r\n    quickSort(array, start, p, animation);\r\n    console.log(\"right\");\r\n    quickSort(array, p+1, end, animation);\r\n    \r\n\r\n}\r\n\r\nfunction partition(array, p, start, end, animation){\r\n    let l = start;\r\n    let h = end-1;\r\n    let pivot = array[p];\r\n    console.log(2);\r\n    swap(array, p, end-1, animation);\r\n    while(l < h){\r\n        if(array[l] < pivot){\r\n           \r\n            l++;\r\n        } else if(array[h] >= pivot){\r\n            h--;\r\n        } else{\r\n            swap(array, l, h);\r\n        }\r\n    }\r\n    let mid = h;\r\n    if(array[h] < pivot){\r\n        mid++;\r\n    }\r\n    console.log(3);\r\n    swap(array, end-1, mid, animation);\r\n    return mid;\r\n}\r\n\r\nfunction swap(array, l, h, animation){\r\n    let temp = array[l];\r\n    array[l] = array[h];\r\n    array[h] = temp;\r\n    console.log(animation);\r\n}\r\n\r\n/*           quickSort first attempt\r\n//         var pivot = array[0];\r\n        \r\n//         if (array.length <= 1) {\r\n          \r\n//           animation.push({pivot : offset, comparedElement : offset });\r\n//           return array;\r\n//         }\r\n    \r\n//         var left = [];\r\n//         var right = [];\r\n        \r\n//         //Partition\r\n//         for (var i = 1; i < array.length; i++) {\r\n//           //Iterate through all elements\r\n//           //If element is smaller than pivot set to left\r\n//           //If element is greater than pivot set to right  \r\n//           if(array[i] < pivot){\r\n//             left.push(array[i]);\r\n            \r\n//           }else{\r\n//             right.push(array[i]);\r\n//             animation.push({pivot: offset, comparedElement: i, isSwap : false});\r\n//           }\r\n//         }\r\n//         var newArray = left.concat(pivot, right);\r\n        \r\n//         for (var i = 0; i < newArray.length; i++) {\r\n//             if(newArray[i] != array[i]){\r\n//                 animation.push({pivot : })\r\n//             }\r\n//         }\r\n        \r\n       \r\n        \r\n//         return quickSort(left, animation, offset).concat(pivot,quickSort(right, animation, (offset+left.length+1)));;\r\n// //        return quickSort(left, animation).concat(pivot, quickSort((right), animation));\r\n      \r\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}