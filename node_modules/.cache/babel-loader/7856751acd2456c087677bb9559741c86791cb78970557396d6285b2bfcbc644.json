{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Juni Ramjattan\\\\Desktop\\\\githubIO\\\\demo0one\\\\src\\\\SortingVisualizer\\\\SortingVisualizer.jsx\";\nimport React from 'react';\nimport * as sortingAlgorithms from '../sortingAlgorithms/sortingAlgorithms';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      intervalId,\n      iteration,\n      animation\n    };\n  }\n  componentDidMount() {\n    this.generateArray();\n  }\n\n  //Create values for array upon mounting component\n  generateArray() {\n    const array = [];\n    for (let i = 0; i < 55; i++) {\n      array.push(randomNumberInRange(5, 750));\n    }\n    this.setState({\n      array\n    });\n  }\n  quickSort() {}\n  bubbleSort() {\n    const animation = sortingAlgorithms.bubbleSort(this.state.array);\n    const bars = document.getElementsByClassName('array-bar');\n    let barPointer = 0;\n    let sortingArraySize = this.state.array.length;\n    const barOneStyle = bars[barPointer].style;\n    const barTwoStyle = bars[barPointer + 1].style;\n    let setHeight = animation[i];\n    let setHeight2 = animation[i + 1];\n    //Add a check to see if swap occurs in same animation frame\n\n    if (barPointer === sortingArraySize - 1) {\n      sortingArraySize = sortingArraySize - 1;\n      barPointer = 0;\n    }\n    // setTimeout(() => {\n    //     barOneStyle.backgroundColor = 'red';\n    //     barTwoStyle.backgroundColor = 'red';\n    //     barOneStyle.height = `${setHeight}px`;\n    //     barTwoStyle.height = `${setHeight2}px`;\n\n    // },i*80);\n    const intervalId = window.setInterval(function () {\n      barOneStyle.backgroundColor = 'red';\n      barTwoStyle.backgroundColor = 'red';\n      barOneStyle.height = `${setHeight}px`;\n      barTwoStyle.height = `${setHeight2}px`;\n    }, 5000);\n\n    // setTimeout(() => {\n    //     barOneStyle.backgroundColor = 'cornflowerblue';\n    //     barTwoStyle.backgroundColor = 'cornflowerblue';\n\n    // },i*20);\n    if (animation[i] < animation[i + 1]) {\n      barPointer++;\n    }\n  }\n  mergeSort() {}\n  heapSort() {}\n\n  //Manually change sorting method to test\n  testSortAlgorithm() {\n    for (let i = 0; i < 40; i++) {\n      const array = [];\n      for (let i = 0; i < 55; i++) {\n        array.push(randomNumberInRange(5, 750));\n      }\n      //Sorting algorithm array\n      const sortedArray = sortingAlgorithms.bubbleSort(array);\n      //JS sorted array\n      const jsSortedArray = array.sort();\n      console.log(arrayEquals(sortedArray, jsSortedArray));\n    }\n  }\n\n  // For each value in the array map it to a div-array-bar with a key id\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: [array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          height: `${value}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)), \";\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.generateArray(),\n        children: \"Generate New Array\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.quickSort(),\n        children: \"Quick Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.bubbleSort(),\n        children: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.generateArray(),\n        children: \"Merge Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.generateArray(),\n        children: \"Heap Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.testSortAlgorithm(),\n        children: \"Test Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this);\n  }\n}\nfunction randomNumberInRange(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nfunction arrayEquals(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) {\n    return false;\n  } else {\n    for (let i = 0; i < arrayOne.length; i++) {\n      if (arrayOne[i] !== arrayTwo[i]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["React","sortingAlgorithms","SortingVisualizer","Component","constructor","props","state","array","intervalId","iteration","animation","componentDidMount","generateArray","i","push","randomNumberInRange","setState","quickSort","bubbleSort","bars","document","getElementsByClassName","barPointer","sortingArraySize","length","barOneStyle","style","barTwoStyle","setHeight","setHeight2","window","setInterval","backgroundColor","height","mergeSort","heapSort","testSortAlgorithm","sortedArray","jsSortedArray","sort","console","log","arrayEquals","render","map","value","idx","min","max","Math","floor","random","arrayOne","arrayTwo"],"sources":["C:/Users/Juni Ramjattan/Desktop/githubIO/demo0one/src/SortingVisualizer/SortingVisualizer.jsx"],"sourcesContent":["import React from 'react'\r\n\r\nimport * as sortingAlgorithms from '../sortingAlgorithms/sortingAlgorithms';\r\n\r\n\r\n\r\nexport default class SortingVisualizer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            intervalId,\r\n            iteration,\r\n            animation,\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.generateArray();\r\n    }\r\n\r\n    //Create values for array upon mounting component\r\n    generateArray(){\r\n        const array = [];\r\n        for(let i=0; i< 55; i++){\r\n            \r\n            array.push(randomNumberInRange(5,750));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    quickSort(){\r\n        \r\n    }\r\n\r\n    bubbleSort(){\r\n        \r\n\r\n        const animation = sortingAlgorithms.bubbleSort(this.state.array);\r\n        const bars = document.getElementsByClassName('array-bar');\r\n        \r\n        let barPointer = 0;\r\n        \r\n        let sortingArraySize = this.state.array.length;\r\n        \r\n       \r\n        \r\n            \r\n            \r\n            const barOneStyle = bars[barPointer].style;\r\n            const barTwoStyle = bars[barPointer+1].style\r\n            let setHeight = animation[i];\r\n            let setHeight2 = animation[i+1];\r\n            //Add a check to see if swap occurs in same animation frame\r\n            \r\n            if(barPointer === sortingArraySize-1){\r\n                sortingArraySize = sortingArraySize-1;\r\n                barPointer = 0;\r\n            }\r\n            // setTimeout(() => {\r\n            //     barOneStyle.backgroundColor = 'red';\r\n            //     barTwoStyle.backgroundColor = 'red';\r\n            //     barOneStyle.height = `${setHeight}px`;\r\n            //     barTwoStyle.height = `${setHeight2}px`;\r\n\r\n            // },i*80);\r\n            const intervalId = window.setInterval(function(){\r\n                barOneStyle.backgroundColor = 'red';\r\n                barTwoStyle.backgroundColor = 'red';\r\n                barOneStyle.height = `${setHeight}px`;\r\n                barTwoStyle.height = `${setHeight2}px`;\r\n              }, 5000);\r\n\r\n\r\n            // setTimeout(() => {\r\n            //     barOneStyle.backgroundColor = 'cornflowerblue';\r\n            //     barTwoStyle.backgroundColor = 'cornflowerblue';\r\n                    \r\n\r\n            // },i*20);\r\n            if(animation[i] < animation[i+1] ){\r\n                barPointer++;\r\n            }\r\n            \r\n            \r\n\r\n        \r\n    }\r\n\r\n    mergeSort(){\r\n\r\n    }\r\n\r\n    heapSort(){\r\n\r\n    }\r\n\r\n    //Manually change sorting method to test\r\n    testSortAlgorithm(){\r\n        for(let i = 0; i<40; i++){\r\n            const array = [];\r\n            for(let i=0; i< 55; i++){\r\n                \r\n                array.push(randomNumberInRange(5,750));\r\n            }\r\n            //Sorting algorithm array\r\n            const sortedArray = sortingAlgorithms.bubbleSort(array);\r\n            //JS sorted array\r\n            const jsSortedArray = array.sort();\r\n            console.log(arrayEquals(sortedArray, jsSortedArray));\r\n            \r\n        }\r\n    \r\n        \r\n    }\r\n\r\n    // For each value in the array map it to a div-array-bar with a key id\r\n    render(){\r\n        const {array} = this.state;\r\n        \r\n        return(\r\n            \r\n            <div className='array-container'>\r\n            {array.map((value, idx) => (\r\n                \r\n                <div className='array-bar' style={{height: `${value}px`}} key={idx}>\r\n                    \r\n                </div>\r\n                \r\n            ))};\r\n            <button onClick={() => this.generateArray()}>Generate New Array</button>\r\n            <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n            <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n            <button onClick={() => this.generateArray()}>Merge Sort</button>\r\n            <button onClick={() => this.generateArray()}>Heap Sort</button>\r\n            <button onClick={() => this.testSortAlgorithm()}>Test Algorithm</button>\r\n            \r\n            </div>\r\n           \r\n        );\r\n       \r\n    }\r\n \r\n}\r\nfunction randomNumberInRange(min, max) {\r\n    \r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\nfunction arrayEquals(arrayOne, arrayTwo){\r\n    if(arrayOne.length !== arrayTwo.length){\r\n        return false;\r\n    }else {\r\n        for(let i = 0; i<arrayOne.length; i++){\r\n            if(arrayOne[i] !== arrayTwo[i]){\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}